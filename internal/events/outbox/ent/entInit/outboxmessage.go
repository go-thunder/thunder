// Code generated by ent, DO NOT EDIT.

package entInit

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/gothunder/thunder/internal/events/outbox/ent/entInit/outboxmessage"
)

// OutboxMessage is the model entity for the OutboxMessage schema.
type OutboxMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string]string `json:"headers,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt  time.Time `json:"delivered_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OutboxMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outboxmessage.FieldPayload, outboxmessage.FieldHeaders:
			values[i] = new([]byte)
		case outboxmessage.FieldTopic:
			values[i] = new(sql.NullString)
		case outboxmessage.FieldCreatedAt, outboxmessage.FieldDeliveredAt:
			values[i] = new(sql.NullTime)
		case outboxmessage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OutboxMessage fields.
func (om *OutboxMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outboxmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				om.ID = *value
			}
		case outboxmessage.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				om.Topic = value.String
			}
		case outboxmessage.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				om.Payload = *value
			}
		case outboxmessage.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &om.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		case outboxmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				om.CreatedAt = value.Time
			}
		case outboxmessage.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				om.DeliveredAt = value.Time
			}
		default:
			om.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OutboxMessage.
// This includes values selected through modifiers, order, etc.
func (om *OutboxMessage) Value(name string) (ent.Value, error) {
	return om.selectValues.Get(name)
}

// Update returns a builder for updating this OutboxMessage.
// Note that you need to call OutboxMessage.Unwrap() before calling this method if this OutboxMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (om *OutboxMessage) Update() *OutboxMessageUpdateOne {
	return NewOutboxMessageClient(om.config).UpdateOne(om)
}

// Unwrap unwraps the OutboxMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (om *OutboxMessage) Unwrap() *OutboxMessage {
	_tx, ok := om.config.driver.(*txDriver)
	if !ok {
		panic("entInit: OutboxMessage is not a transactional entity")
	}
	om.config.driver = _tx.drv
	return om
}

// String implements the fmt.Stringer.
func (om *OutboxMessage) String() string {
	var builder strings.Builder
	builder.WriteString("OutboxMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", om.ID))
	builder.WriteString("topic=")
	builder.WriteString(om.Topic)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", om.Payload))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(fmt.Sprintf("%v", om.Headers))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(om.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delivered_at=")
	builder.WriteString(om.DeliveredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OutboxMessages is a parsable slice of OutboxMessage.
type OutboxMessages []*OutboxMessage
