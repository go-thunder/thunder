// Code generated by ent, DO NOT EDIT.

package entInit

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/gothunder/thunder/internal/events/outbox/ent/entInit/outboxmessage"
)

// OutboxMessageCreate is the builder for creating a OutboxMessage entity.
type OutboxMessageCreate struct {
	config
	mutation *OutboxMessageMutation
	hooks    []Hook
}

// SetTopic sets the "topic" field.
func (omc *OutboxMessageCreate) SetTopic(s string) *OutboxMessageCreate {
	omc.mutation.SetTopic(s)
	return omc
}

// SetPayload sets the "payload" field.
func (omc *OutboxMessageCreate) SetPayload(b []byte) *OutboxMessageCreate {
	omc.mutation.SetPayload(b)
	return omc
}

// SetHeaders sets the "headers" field.
func (omc *OutboxMessageCreate) SetHeaders(m map[string]string) *OutboxMessageCreate {
	omc.mutation.SetHeaders(m)
	return omc
}

// SetCreatedAt sets the "created_at" field.
func (omc *OutboxMessageCreate) SetCreatedAt(t time.Time) *OutboxMessageCreate {
	omc.mutation.SetCreatedAt(t)
	return omc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (omc *OutboxMessageCreate) SetNillableCreatedAt(t *time.Time) *OutboxMessageCreate {
	if t != nil {
		omc.SetCreatedAt(*t)
	}
	return omc
}

// SetDeliveredAt sets the "delivered_at" field.
func (omc *OutboxMessageCreate) SetDeliveredAt(t time.Time) *OutboxMessageCreate {
	omc.mutation.SetDeliveredAt(t)
	return omc
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (omc *OutboxMessageCreate) SetNillableDeliveredAt(t *time.Time) *OutboxMessageCreate {
	if t != nil {
		omc.SetDeliveredAt(*t)
	}
	return omc
}

// SetID sets the "id" field.
func (omc *OutboxMessageCreate) SetID(u uuid.UUID) *OutboxMessageCreate {
	omc.mutation.SetID(u)
	return omc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (omc *OutboxMessageCreate) SetNillableID(u *uuid.UUID) *OutboxMessageCreate {
	if u != nil {
		omc.SetID(*u)
	}
	return omc
}

// Mutation returns the OutboxMessageMutation object of the builder.
func (omc *OutboxMessageCreate) Mutation() *OutboxMessageMutation {
	return omc.mutation
}

// Save creates the OutboxMessage in the database.
func (omc *OutboxMessageCreate) Save(ctx context.Context) (*OutboxMessage, error) {
	omc.defaults()
	return withHooks(ctx, omc.sqlSave, omc.mutation, omc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OutboxMessageCreate) SaveX(ctx context.Context) *OutboxMessage {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OutboxMessageCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OutboxMessageCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omc *OutboxMessageCreate) defaults() {
	if _, ok := omc.mutation.CreatedAt(); !ok {
		v := outboxmessage.DefaultCreatedAt()
		omc.mutation.SetCreatedAt(v)
	}
	if _, ok := omc.mutation.ID(); !ok {
		v := outboxmessage.DefaultID()
		omc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omc *OutboxMessageCreate) check() error {
	if _, ok := omc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`entInit: missing required field "OutboxMessage.topic"`)}
	}
	if v, ok := omc.mutation.Topic(); ok {
		if err := outboxmessage.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`entInit: validator failed for field "OutboxMessage.topic": %w`, err)}
		}
	}
	if _, ok := omc.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`entInit: missing required field "OutboxMessage.payload"`)}
	}
	if v, ok := omc.mutation.Payload(); ok {
		if err := outboxmessage.PayloadValidator(v); err != nil {
			return &ValidationError{Name: "payload", err: fmt.Errorf(`entInit: validator failed for field "OutboxMessage.payload": %w`, err)}
		}
	}
	if _, ok := omc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entInit: missing required field "OutboxMessage.created_at"`)}
	}
	return nil
}

func (omc *OutboxMessageCreate) sqlSave(ctx context.Context) (*OutboxMessage, error) {
	if err := omc.check(); err != nil {
		return nil, err
	}
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	omc.mutation.id = &_node.ID
	omc.mutation.done = true
	return _node, nil
}

func (omc *OutboxMessageCreate) createSpec() (*OutboxMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &OutboxMessage{config: omc.config}
		_spec = sqlgraph.NewCreateSpec(outboxmessage.Table, sqlgraph.NewFieldSpec(outboxmessage.FieldID, field.TypeUUID))
	)
	if id, ok := omc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := omc.mutation.Topic(); ok {
		_spec.SetField(outboxmessage.FieldTopic, field.TypeString, value)
		_node.Topic = value
	}
	if value, ok := omc.mutation.Payload(); ok {
		_spec.SetField(outboxmessage.FieldPayload, field.TypeBytes, value)
		_node.Payload = value
	}
	if value, ok := omc.mutation.Headers(); ok {
		_spec.SetField(outboxmessage.FieldHeaders, field.TypeJSON, value)
		_node.Headers = value
	}
	if value, ok := omc.mutation.CreatedAt(); ok {
		_spec.SetField(outboxmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := omc.mutation.DeliveredAt(); ok {
		_spec.SetField(outboxmessage.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = value
	}
	return _node, _spec
}

// OutboxMessageCreateBulk is the builder for creating many OutboxMessage entities in bulk.
type OutboxMessageCreateBulk struct {
	config
	err      error
	builders []*OutboxMessageCreate
}

// Save creates the OutboxMessage entities in the database.
func (omcb *OutboxMessageCreateBulk) Save(ctx context.Context) ([]*OutboxMessage, error) {
	if omcb.err != nil {
		return nil, omcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OutboxMessage, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutboxMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OutboxMessageCreateBulk) SaveX(ctx context.Context) []*OutboxMessage {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OutboxMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OutboxMessageCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}
